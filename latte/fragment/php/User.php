<?php
/**
 * Stub generated by xlatte
 */
class User extends userBase{

    const FLAG_ROOT_USER = 1;

    const FLAG_SYS_ADMIN = 2;

    const FLAG_BANNED_USER = 4;

    const FLAG_IN_TRASH = 8;

    /**
     * Gets a user by its uname
     *
     * @param $uname
     * @return User
     */
    public static function byUname($uname){
        return DL::oneOf('User', "
            SELECT #COLUMNS
            FROM `user`
            WHERE uname = '$uname'
        ");
    }

    /**
     * @remote
     * @param string $text
     * @return User[]
     * @throws SecurityException
     */
    public static function search($text){
        if(!Session::me()->isRoot()){
            throw new SecurityException('Only root user');
        }
        return DL::arrayOf('User', "
            SELECT #COLUMNS
            FROM `user`
            WHERE uname LIKE '$text%'
        ");
    }

    /**
     * @remote
     * @return User[]
     * @throws SecurityException
     */
    public static function catalog(){

        if(!Session::me()->isRoot()){
            throw new SecurityException('Only root user');
        }

        $except = '';

        if (Session::idUser() != 1){
            $except = "AND iduser != 1";
        }

        return DL::arrayOf('User', "
            SELECT #COLUMNS
            FROM `user`
            WHERE (flags & 4) != 4
            $except
        ");
    }

    /**
     * @var array
     */
    private $_groups;

    /**
     * @remote
     * @param string $oldPassword
     * @param string $password
     * @return boolean
     * @throws Exception
     */
    public function changePassword($oldPassword, $password){
        if (!Session::me()->isRoot() && $this->iduser != Session::idUser()){
            throw new SecurityException('Only root users may check passwords');
        }

        if(!Session::me()->isRoot()){
            if (md5($oldPassword) != $this->password){
                throw new Exception('currentPasswordNotValid');
            }
        }

        $this->password = DL::getSingle("SELECT md5('$password')");
        $this->save();
    }

    /**
     * Gets an array of groups of the system
     *
     * @return array
     */
    public function getGroups(){
        if(!$this->_groups){
            $this->_groups = Group::byUser($this->iduser);
        }

        return $this->_groups;
    }

    /**
     * Gets a value indicating if the user is in the specified group
     *
     * @param int $idgroup
     * @return bool
     */
    public function inGroup($idgroup){
        foreach($this->getGroups() as $g){
            if ($g->idgroup == $idgroup){
                return true;
            }
        }
        return false;
    }

    /**
     * @return bool
     */
    public function inTrash(){
        return ($this->flags & self::FLAG_IN_TRASH) == self::FLAG_IN_TRASH;

    }

    /**
     * @return bool
     */
    public function isBanned(){
        return ($this->flags & self::FLAG_BANNED_USER) == self::FLAG_BANNED_USER;
    }

    /**
     * Gets a value indicating if the user is root
     * @return bool
     */
    public function isRoot(){
        return ($this->flags & self::FLAG_ROOT_USER) == self::FLAG_ROOT_USER;
    }

    /**
     * @return bool
     */
    public function isSysAdmin(){
        return ($this->flags & self::FLAG_SYS_ADMIN) == self::FLAG_SYS_ADMIN;
    }

    /**
     * Loads necessary data for log-in
     */
    public function loadLoginData(){
        $this->getGroups();
    }

    /**
     * Override.
     */
    public function onInserting(){
        if($this->password){
            $this->password = md5($this->password);
        }
    }

    /**
     * Override.
     */
    public function onUpdating(){
        if (sizeof($this->password) == 0){
            $this->password = DL::getSingle("SELECT password FROM user WHERE iduser = '$this->iduser'");
        }
    }

    /**
     * Override
     * @return array
     */
    public function pack(){
        $arr = parent::pack();
        //unset($arr['fields']['password']);

        if($this->_groups){
            $arr['properties']['_groups'] = DataRecord::packArray($this->_groups);
        }
        return $arr;
    }

    /**
     * @remote
     * @param string $password
     * @return boolean
     * @throws SecurityException
     */
    public function passwordCorrect($password){
        if (!Session::me()->isRoot() && $this->iduser != Session::idUser()){
            throw new SecurityException('Only root users may check passwords');
        }

        return md5($password) == $this->password;
    }

}