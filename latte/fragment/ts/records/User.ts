/**
 * Generated by xlatte
 */
module latte{

	/**
	 * Record for table user
	 */
	export class User extends userBase{

		//region Static
		static FLAG_ROOT_USER = 1;

		static FLAG_SYS_ADMIN = 2;

		static FLAG_BANNED_USER = 4;

		static FLAG_TRASH = 8;

		static me: User = null;

		/**
		 * Gets the suggestion loader
		 * @returns {*}
		 */
		static suggestionLoader(){
			return (d: DataRecordValueItem, callback: (items: Array<Item>) => any): Message  => {

				return User.search(d.text).send((users: User[]) => {
					var items: Array<Item> = [];

					users.forEach((u: User) => {
						var b = new ButtonItem(u.uname);
						b.click.add(() => { d.record = u });
						items.push(b)
					});

					callback.call(this, items)

				})
			}
		}

		//endregion

		//region Fields
		//endregion

		//region Methods
		/**
		 * Gets the metadata about the record
		 *
		 * @returns Object
		 */
		getMetadata(): IRecordMeta {
			return {
				fields: {
					uname: {
						text:  strings.userName,
						type: 'string'
					},
					password: {
						text: strings.password,
						type: 'password',
						visible: 'if-not-inserted'
					},
                    flags:{
                        text: strings.flags,
                        type: 'flags',
                        options:{
                            1: strings.isRoot,
							2: strings.isSysAdmin,
                            4: strings.isBanned,
                            8: strings.inTrash
                        }
                    }
				}
			}
		}

        /**
         * Returns a value indicating if the user belongs to the specified group
         * @param idgroup
         * @returns {boolean}
         */
        inGroup(idgroup: number): boolean{

            if(this.groups && this.groups.length) {
                for (let i in this.groups){
                    if(this.groups[i].idgroup == idgroup) {
                        return true;
                    }
                }
            }

            return false;
        }

		/**
		 * Returns a string representation of the object
		 */
		toString(): string{
			return this.uname;
		}
		//endregion

		//region Events
		//endregion

		//region Properties
		/**
		 * Gets a string with attributes of the record
		 *
		 * @returns {string}
		 */
		get attributes(): string {
			// TODO: Give info like "is root", "is banned" etc
            let arr = [];

            if(this.isRoot) {
                arr.push(strings.isRoot)
            }

            if(this.isBanned) {
                arr.push(strings.isBanned)
            }

            if(this.isTrash) {
                arr.push(strings.inTrash)
            }

			return arr.join(", ");
		}

        /**
         * Gets the flags as a string
         *
         * @returns {string}
         */
        get flagsString(): string {
            return InputItem.format(this.flags, 'flags', this.getMetadata().fields['flags'].options);
        }

        /**
         * Property field
         */
        private _groups: Group[];

        /**
         * Gets or sets the groups of the record
         *
         * @returns {Group[]}
         */
        get groups(): Group[] {
            return this._groups;
        }

        /**
         * Gets or sets the groups of the record
         *
         * @param {Group[]} value
         */
        set groups(value: Group[]) {
            this._groups = value;
        }

        /**
         * Gets a value indicating if the user is banned
         *
         * @returns {boolean}
         */
        get isBanned(): boolean {
            return (this.flags & User.FLAG_BANNED_USER) == User.FLAG_BANNED_USER;
        }

        /**
         * Gets a value indicating if user is root
         *
         * @returns {boolean}
         */
        get isRoot(): boolean {
            return (this.flags & User.FLAG_ROOT_USER) == User.FLAG_ROOT_USER;
        }

		/**
		 * Gets a value indicating if user is sys-admin
		 *
		 * @returns {boolean}
		 */
		get isSysAdmin(): boolean {
			return (this.flags & User.FLAG_SYS_ADMIN) == User.FLAG_SYS_ADMIN;
		}


		/**
         * Gets a value indicating if the user is trash
         *
         * @returns {boolean}
         */
        get isTrash(): boolean {
            return (this.flags & User.FLAG_TRASH) == User.FLAG_TRASH;
        }


        //endregion

	}
}