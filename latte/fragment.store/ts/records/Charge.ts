/**
 * Generated by xlatte
 */
module latte{

	/**
	 * Record for table charge
	 */
	export class Charge extends chargeBase{

		//region Static

		static FLAG_ADDRESS_NOT_NECESSARY = 8;

		/**
		 * Prompts the user to charge the specified amount
		 * @param amount
		 */
		static prompt(amount: number, description: string, flags: number = 0){


			Charge.create(amount, description, flags).send((charge: Charge) => {

				CustomerView.prompt(charge, (customer: Customer, address: Address) => {
					log(customer);
					log(address);

					// Save collected data

					charge.idcustomer = customer.idcustomer;
					charge.idshippingaddress = address.idaddress;
					charge.customer = customer;
					charge.shippingAddress = address;

					//
					charge.save(() => {

						PaymentMethodView.prompt(charge, () => {

						});

					});
				});

				// if(c.isWalletSet) {
                //
				// 	c.wallet.driver.executeCharge(c);
                //
				// }else{
				// 	//TODO: Implement this
				// 	log("Charge.prompt: This flow part has not been implemented");
				// }

			});

		}
		//endregion


		//region Fields
		/**
		 * Customer of the charge
		 * @type {any}
		 */
		customer: Customer = null;

		/**
		 * Shipping address of the charge
		 * @type {any}
		 */
		shippingAddress: Address = null;

		/**
		 * Wallet of the charge
		 * @type {any}
		 */
		wallet: Wallet = null;
		//endregion


		//region Private Methods
		//endregion


		//region Events
		//endregion


		//region Properties

		/**
		 * Gets a value indicating if the address is necessary
		 *
		 * @returns {boolean}
		 */
		get isNoShipping(): boolean {
			return (this.flags & Charge.FLAG_ADDRESS_NOT_NECESSARY) == Charge.FLAG_ADDRESS_NOT_NECESSARY;
		}

		/**
		 * Gets a value indicating if there is a customer on the charge
		 *
		 * @returns {boolean}
		 */
		get isCustomerSet(): boolean {
			return this.customer instanceof Customer;
		}

		/**
		 * Gets a value indicating if there is a wallet set on the charge
		 *
		 * @returns {boolean}
		 */
		get isWalletSet(): boolean {
			return this.wallet instanceof Wallet;
		}

		//endregion

	}
}